/*
	Time complexity: O(1) for all operations.
	Space Complexity: O(N)
	
	Where 'N' is the size of the array,    
*/

import java.util.ArrayList;

public class NQueue {
	// Array to implement the queues.
	private ArrayList<Integer> arr;

	// Array to keep track of the indices of the front elements of every queue.
	private ArrayList<Integer> start;

	// Array to keep track of the indices of the rear elements of every queue.
	private ArrayList<Integer> end;

	// Array to store the next pointers/indices.
	private ArrayList<Integer> next;

	// Variable to store the starting index of the empty list.
	private int temp;

	// Initialize your data structure.
	public NQueue(int n, int s) {
		// Create the arrays.
		arr = new ArrayList<Integer>(s);
		start = new ArrayList<Integer>(n);
		end = new ArrayList<Integer>(n);
		next = new ArrayList<Integer>(s);

		for(int i = 0; i < s; i++)
		{
			arr.add(-1);
		}
        
		// Initialize all queues as empty.
		for (int i = 0; i < n; i++) {
			start.add(-1);
			end.add(-1);
		}

		
		// Initialize all spaces as empty as initially the complete array is empty.
		for (int i = 0; i < s - 1; i++) {
			next.add(i + 1);
		}

		// Set the last pointer of the empty list to -1 to indicate the end of empty list.
		next.add(s-1,-1);

		// Initialize the starting index of the empty list.
		temp = 0;
	}

	// Enqueues 'X' into the Mth Queue. Returns true if it gets enqueued into the queue, and false otherwise.
	public boolean enqueue(int x, int m) {
		if (temp == -1) {
			// Array is full. So, element cannot be inserted.
			return false;
		}
	
		// Store the index of the first empty slot in a temporary variable.
		int index = temp;

		// Update the starting index of the empty list.
		temp = next.get(index);

		// Check if queue is empty.
		if (start.get(m - 1) == -1) {

			// Update start array.
			start.set(m - 1, index);
		} else {

			// Update next element of end.
			next.set(end.get(m - 1), index);
		}

		// Update next element.
		next.set(index, -1);

		// Update end element for the given queue.
		end.set(m - 1, index);

		// Put the value to be enqueued into the array.
		arr.set(index, x);

		return true;
	}

	// Dequeues top element from 'M'th Queue. Returns -1 if the queue is empty, otherwise returns the dequeued element.
	public int dequeue(int m) {
		if (start.get(m - 1) == -1) {
			// Queue is empty. So, return -1.
			return -1;
		}

		// Find the index of the front element of the queue.
		int index = start.get(m - 1);

		// Remove the element from the queue by updating the front of the stack list.
		start.set(m - 1, next.get(index));

		// Add the empty slot to the empty list.
		next.set(index, temp);
		temp = index;

		// Return the popped element.
		return arr.get(index);
	}
};
