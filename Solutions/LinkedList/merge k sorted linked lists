class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0){
            //0 linked lists.
            return null;
        } 
        
        ListNode res = merge(lists,0,lists.length-1);
        return res;
       
    }
    
    public ListNode merge(ListNode[] lists, int lo, int hi){
        if(lo==hi) return lists[lo];
        
        int mid = lo + (hi-lo)/2;
        ListNode left = merge(lists,lo,mid);
        ListNode right = merge(lists,mid+1,hi);
        ListNode ultimate_head = merge2Lists(left,right);
        return ultimate_head;
    }
    
    public ListNode merge2Lists(ListNode head1, ListNode head2){
        ListNode dummy = new ListNode(-1);
        ListNode head = dummy, tail = dummy;
        
        while(head1!=null && head2!=null){
            if(head1.val<=head2.val){
                tail.next = head1;
                head1 = head1.next;
            } else {
                tail.next = head2;
                head2 = head2.next;
            }
            tail = tail.next;
        }
        
        if(head1!=null) tail.next = head1;
        else tail.next = head2;
        
        return head.next;
    }
}
