class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head.next==null || k==1) return head;
        
        int n = k;
        ListNode prev = new ListNode(-1);
        ListNode pt = prev;
        
        while(head!=null){
            ListNode curr = new ListNode(-1);
            ListNode ct = curr;
            
            k = n;
            
            while(head!=null && k>0){
                ct.next = head;
                ct = head;
                head = head.next;
                k = k - 1;
            }
            
            if(k==0){
                ListNode rd = curr.next;
                curr = reverse(curr.next, n);
                System.out.println(curr.val);
                
                if(pt==prev){
                    prev = curr;
                } else {
                    pt.next = curr;
                }
                pt = rd;
            } else {
                pt.next = curr.next;
            }
        }
        
        return prev;
    }
    
    public static ListNode reverse(ListNode head, int k){
        ListNode prev = null;
        ListNode curr = head;
        while(curr!=null && k-->0){
            ListNode ahead = curr.next;
            curr.next = prev;
            prev = curr;
            curr = ahead;
        }
        
        return prev;
    }
    
    public static void display(ListNode head){
        while(head!=null){
            System.out.println(head.val);
            head = head.next;
        }
    }
}
