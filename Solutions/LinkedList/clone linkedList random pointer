/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        Node dummy = new Node(-1);
        Node tail = dummy;
        
        HashMap<Node, Node> hm = new HashMap<>();
        
        Node curr = head;
        while(curr!=null){
            //Create a new Node.
            Node new_node = new Node(curr.val);
            //Update the tail.
            tail.next = new_node;
            tail = new_node;
            //Update the hashmap.
            hm.put(curr, new_node);
            //Update the counter i.e. curr node.
            curr = curr.next;
        }
        
        curr = head;
        
        while(curr!=null){
            Node randomNode = curr.random;
            if(randomNode!=null){
                randomNode = hm.get(randomNode);
            }
            
            hm.get(curr).random = randomNode;
            curr = curr.next;
        }
        
        return dummy.next;
    }
}
