class Solution
{
    
	ArrayList <Integer> boundary(Node node)
	{
	    ArrayList<Integer> ans = new ArrayList<>();
	    if(node == null) return ans;
	    ans.add(node.data);
	    leftMost(node.left, ans);
	    if(node.left!=null || node.right!=null) leafNodes(node, ans);
	    rightMost(node.right, ans);
	    return ans;
	}
	
	void leftMost(Node node, ArrayList<Integer> ans){
	    if(node == null) return;
	    if(node.left == null && node.right == null) return;
	    ans.add(node.data);
	    if(node.left!=null){
	        leftMost(node.left, ans);
	    } else {
	        leftMost(node.right, ans);
	    }
	}
	
	void leafNodes(Node node, ArrayList<Integer> ans){
	    if(node == null) return;
	    if(node.left == null && node.right == null){
	        ans.add(node.data);
	        return;
	    }
	    
	    if(node.left!=null){
	        leafNodes(node.left, ans);
	    }
	    
	    if(node.right!=null){
	        leafNodes(node.right, ans);
	    }
	}
	
	void rightMost(Node node, ArrayList<Integer> ans){
	    if(node == null) return;
	    if(node.left == null && node.right == null) return;
	    if(node.right!=null){
	        rightMost(node.right, ans);
	    } else {
	        rightMost(node.left, ans);
	    }
	    ans.add(node.data);
	}
}
