import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = in.nextInt();
        }
        int tar = in.nextInt();
        // System.out.println(tssRec(arr, 0, 0, tar));
        int[][] dp = new int[n+1][tar+1];
        for(int i=0;i<n;i++){
            Arrays.fill(dp[i], -1);
        }
        // System.out.println(tssMem(arr,0,0,tar,dp));
        System.out.println(tssTab(arr,tar));
    }

    public static boolean tssRec(int[] arr, int idx, int cs, int ts){
        if(idx==arr.length){
            return cs==ts;
        }

        //Either comes.
        boolean ans1 = false;
        if(cs + arr[idx] <= ts) ans1 = tssRec(arr,idx+1,cs+arr[idx],ts);

        //Or doesn't.
        boolean ans2 = tssRec(arr, idx+1, cs, ts);

        return ans1 || ans2;
    }

    public static boolean tssMem(int[] arr, int idx, int cs, int ts, int[][] dp){
        if(idx == arr.length){
            return cs == ts;
        }

        if(dp[idx][cs]!=-1) return dp[idx][cs] == 1;

        boolean ans1 = false;
        if(cs + arr[idx] <= ts) ans1 = tssMem(arr,idx+1,cs+arr[idx],ts,dp);

        boolean ans2 = tssMem(arr,idx+1,cs,ts,dp);
        dp[idx][cs] = (ans1 || ans2) ? 1 : 0;
        return ans1 || ans2;
    }

    public static boolean tssTab(int[] arr, int ts){
        int n = arr.length + 1;
        int m = ts + 1;
        int[][] dp = new int[n][m];

        for(int j=0;j<m;j++){
            dp[0][j] = 0;
        }

        for(int i=0;i<n;i++){
            dp[i][0] = 1;
        }

        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                // System.out.println(i + " " + j);
                int yes = (j - arr[i-1] >= 0) ? dp[i-1][j-arr[i-1]] : 0;
                int no = dp[i-1][j];

                if(yes == 1 || no == 1){
                    dp[i][j] = 1;
                } else {
                    dp[i][j] = 0;
                }
            }
        }

        return (dp[n-1][m-1] == 1);
    }
    
    
    /* Optimized way */
    static Boolean isSubsetSum(int N, int arr[], int sum){
        int[] prev = new int[sum+1];
        for(int i=1;i<=N;i++){
            int[] curr = new int[sum+1];
            prev[0] = curr[0] = 1;
            for(int j=1;j<=sum;j++){
                int yes = (j - arr[i-1] >= 0) ? prev[j-arr[i-1]] : 0;
                int no = prev[j];
                if(yes ==1 || no == 1){
                    curr[j] = 1;
                } else {
                    curr[j] = 0;
                }
            }
            
            for(int j=0;j<=sum;j++){
                prev[j] = curr[j];
            }
        }
        
        return prev[sum] == 1;
    }
}
