import java.util.*;
import java.io.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = in.nextInt();
        }

        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        // System.out.println(csmmMem(0, n, arr, dp));
        System.out.println(csmmTab(n, arr));
    }

    public static int csmmMem(int src, int dest, int[] arr, int[] dp){
        if(src>dest) return Integer.MAX_VALUE;
        if(src==dest) return 0;

        if(dp[src] != -1){
            return dp[src];
        }

        int minMoves = Integer.MAX_VALUE;
        for(int jumps = 1; jumps <= arr[src]; jumps++){
            int moves = csmmMem(src+jumps, dest, arr, dp);
            if(moves != Integer.MAX_VALUE) minMoves = Math.min(moves+1, minMoves);
        }
        dp[src] = minMoves;
        return dp[src];
    }

    public static int csmmTab(int dest, int[] arr){
        int[] dp = new int[dest];
        dp[dest-1] = 0;

        for(int i=dest-2;i>=0;i--){
            int minMoves = Integer.MAX_VALUE;
            for(int j=1;j<=arr[i];j++){
                if(i+j < dp.length) minMoves = Math.min(minMoves, dp[i+j]);
            }
            dp[i] = (minMoves == Integer.MAX_VALUE) ? Integer.MAX_VALUE : minMoves + 1;
        }

        return dp[0];
    }
}
