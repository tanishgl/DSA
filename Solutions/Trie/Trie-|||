public class Trie {
	
	public static class Node {
		private Node[] children = new Node[26];
		private int isEnd = 0;
		private int isPref = 0;
		
		public boolean contains(char ch){
			return children[ch-'a'] != null;
		}
		
		public Node get(char ch){
			return children[ch-'a'];
		}
		
		public void set(char ch){
			children[ch-'a'] = new Node();
		}
		
		public void increaseFreq(){
			this.isEnd++;
		}
		
		public void decreaseFreq(){
			this.isEnd--;
		}
		
		public int getFreq(){
			return this.isEnd;
		}
		
		public void increasePref(){
			this.isPref++;
		}
		
		public void decreasePref(){
			this.isPref--;
		}
		
		public int getPref(){
			return this.isPref;
		}
	}
	
	Node root;
	
    public Trie() {
        root = new Node();
    }

    public void insert(String word) {
        // Write your code here.
		Node curr = root;
		for(int i=0;i<word.length();i++){
			curr.increasePref();
			char ch = word.charAt(i);
			if(!curr.contains(ch)){
				curr.set(ch);
			}
			curr = curr.get(ch);
		}
		curr.increasePref();
		curr.increaseFreq();
    }

    public int countWordsEqualTo(String word) {
        // Write your code here.
		Node curr = root;
		for(int i=0;i<word.length();i++){
			char ch = word.charAt(i);
			if(!curr.contains(ch)){
				return 0;
			}
			curr = curr.get(ch);
		}
		return curr.getFreq();
    }

    public int countWordsStartingWith(String word) {
        // Write your code here.
		Node curr = root;
		for(int i=0;i<word.length();i++){
			char ch = word.charAt(i);
			if(!curr.contains(ch)){
				return 0;
			}
			curr = curr.get(ch);
		}
		
		return curr.getPref();
    }

    public void erase(String word) {
        // Write your code here.
		Node curr = root;
		for(int i=0;i<word.length();i++){
			curr.decreasePref();
			char ch = word.charAt(i);
			curr = curr.get(ch);
		}
		curr.decreasePref();
		curr.decreaseFreq();
    }

}
