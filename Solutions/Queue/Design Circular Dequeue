class MyCircularDeque {
    
    int front, rear, size;
    int[] arr;

    public MyCircularDeque(int k) {
        arr = new int[k];
        front = 0;
        rear = 0;
        size = 0;
    }
    
    public boolean insertFront(int value) {
        if(size==arr.length){
            return false;
        }
        
        if(size!=0){
            front = (front - 1 + arr.length) % arr.length;
        }
        
        arr[front] = value;
        size++;
        return true;
    }
    
    public boolean insertLast(int value) {
        if(size==arr.length){
            return false;
        }
        
        if(size!=0){
            rear = (rear + 1) % arr.length;
        }
        
        arr[rear] = value;
        size++;
        return true;
    }
    
    public boolean deleteFront() {
        if(size==0){
            return false;
        }
        
        front = (front + 1) % arr.length;
        size--;
        if(size==0){
            front = rear = 0;
        }
        return true;
    }
    
    public boolean deleteLast() {
        if(size==0){
            return false;
        }
        
        rear = (rear - 1 + arr.length) % arr.length;
        size--;
        if(size==0){
            front = rear = 0;
        }
        return true;
    }
    
    public int getFront() {
        if(size==0){
            return -1;
        }
        
        return arr[front];
    }
    
    public int getRear() {
        if(size==0){
            return -1;
        }
        
        return arr[rear];
    }
    
    public boolean isEmpty() {
        return (size==0);
    }
    
    public boolean isFull() {
        return (size==arr.length);
    }
}
