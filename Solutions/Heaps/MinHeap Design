import java.io.*;
import java.util.*;

public class Main {

  public static class PriorityQueue {
    ArrayList<Integer> data;

    public PriorityQueue() {
      data = new ArrayList<>();
    }

    public void swap(int curIdx, int parIdx){
      int temp = data.get(curIdx);
      data.set(curIdx, data.get(parIdx));
      data.set(parIdx, temp);
    }

    public boolean heapOrderViolate(int curIdx, int parIdx){
      return data.get(curIdx) < data.get(parIdx);
    }

    public void upHeapify(int idx){
      if(idx < 0) return;
      int curIdx = idx;
      int parIdx = (idx - 1) / 2;
      if(heapOrderViolate(curIdx, parIdx)){
        swap(curIdx, parIdx);
        upHeapify(parIdx);
      }
    }

    public void add(int val) {
      data.add(val);
      upHeapify(data.size() - 1);
    }

    public void downHeapify(int parIdx){
      if(parIdx >= size()) return;
      int leftIdx = parIdx * 2 + 1;
      int leftVal = (leftIdx < size()) ? data.get(leftIdx) : Integer.MAX_VALUE;
      int rightIdx = parIdx * 2 + 2;
      int rightVal = (rightIdx < size()) ? data.get(rightIdx) : Integer.MAX_VALUE;
      int min = Math.min(data.get(parIdx), Math.min(leftVal, rightVal));
      if(min == leftVal){
        swap(parIdx, leftIdx);
        downHeapify(leftIdx);
      } else if (min == rightVal){
        swap(parIdx, rightIdx);
        downHeapify(rightIdx);
      }
    }

    public int remove() {
      // write your code here
      if(size() == 0){
        System.out.println("Underflow");
        return -1;
      }

      swap(0, size() - 1);
      int val = data.remove(size() - 1);
      downHeapify(0);
      return val;
    }

    public int peek() {
      // write your code here
      if(size() == 0){
        System.out.println("Underflow");
        return -1;
      }

      return data.get(0);
    }

    public int size() {
      // write your code here
      return data.size();
    }
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PriorityQueue qu = new PriorityQueue();

    String str = br.readLine();
    while (str.equals("quit") == false) {
      if (str.startsWith("add")) {
        int val = Integer.parseInt(str.split(" ")[1]);
        qu.add(val);
      } else if (str.startsWith("remove")) {
        int val = qu.remove();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("peek")) {
        int val = qu.peek();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("size")) {
        System.out.println(qu.size());
      }
      str = br.readLine();
    }
  }
}
