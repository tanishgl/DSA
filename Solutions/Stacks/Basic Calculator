class Solution {
    public int calculate(String str) {
        str = refine(str);
        Stack<Integer> operand = new Stack<>();
        Stack<Character> operator = new Stack<>();

        for(int i=0;i<str.length();i++){
            char ch = str.charAt(i);

            if(ch>='0' && ch<='9'){
                int num = 0;
                while(i<str.length() && str.charAt(i)>='0' && str.charAt(i)<='9'){
                    num = num * 10 + (str.charAt(i) - '0');
                    i++;
                }
                
                operand.push(num);
                i--;
            } else if (ch=='('){
                operator.push(ch);
            } else if (ch==')'){
                while(operator.peek()!='('){
                    int op2 = operand.pop();
                    int op1 = operand.pop();
                    char opr = operator.pop();
                    operand.push(perform(op1, opr, op2)); 
                }

                //Finally pop the '('.
                operator.pop();
            } else if (ch=='+' || ch=='-' || ch=='*' || ch=='/'){
                while(operator.size()>0 && operator.peek()!='(' && prec(operator.peek())>=prec(ch)){
                    int op2 = operand.pop();
                    int op1 = operand.pop();
                    char opr = operator.pop();
                    operand.push(perform(op1, opr, op2));
                }

                //Finally, push the opertor.
                operator.push(ch);
            }
        }

        while(operator.size()>0){
            int op2 = operand.pop();
            int op1 = operand.pop();
            char opr = operator.pop();
            operand.push(perform(op1, opr, op2));
        }

        return operand.peek();
    }
    
    public static int perform(int op1, char opr, int op2){
     if(opr=='*'){
         return op1*op2;
     } else if (opr=='/'){
         return op1/op2;
     } else if (opr=='+'){
         return op1 + op2;
     } else if (opr=='-'){
         return op1 - op2;
     }

     return 0;
 }

 public static int prec(char ch){
     if(ch=='*' || ch=='/') return 2;
     if(ch=='+' || ch=='-') return 1;
     return 0;
 }
    
    public static String refine(String str){
        StringBuilder ans = new StringBuilder("");
        
        for(int i=0;i<str.length();i++){
            char ch = str.charAt(i);
            
            if(ch==' ') continue;
            
            if(ch=='+'){
                if(ans.length()==0 || ans.charAt(ans.length()-1)=='(')
                    ans.append("0+");
                else if (ans.charAt(ans.length()-1)=='+' || ans.charAt(ans.length()-1)=='-')
                    continue;
                else 
                    ans.append('+');
            } else if (ch=='-'){
                if(ans.length()==0 || ans.charAt(ans.length()-1)=='(')
                    ans.append("0-");
                else if (ans.charAt(ans.length()-1)=='+')
                    ans.setCharAt(ans.length()-1, '-');
                else if (ans.charAt(ans.length()-1)=='-')
                    ans.setCharAt(ans.length()-1, '+');
                else 
                    ans.append('-');
            } else {
                ans.append(ch);
            }
        }
        
        return ans.toString();
    }
}
