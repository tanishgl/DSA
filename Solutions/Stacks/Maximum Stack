class MaxStack {

    static class Node{
        int data;
        Node next;
        Node prev;
        Node(int data){
            this.data = data;
        }

        Node(int data, Node prev, Node next){
            this.data = data;
            this.prev = prev;
            this.next = next;
        }
    }

    TreeMap<Integer, ArrayList<Node>> map;
    Node head, tail;

    public MaxStack() {
        // do intialization if necessary
        head = new Node(-1);
        tail = new Node(-1);
        head.next = tail;
        tail.prev = head;
        map = new TreeMap<>();
    }

    /*
     * @param number: An integer
     * @return: nothing
     */    
    public void push(int x) {
        // write your code here
        //We will push towards the end of the DLL.
        Node temp = new Node(x, tail.prev, tail);
        tail.prev.next = temp;
        tail.prev = temp;

        if(map.containsKey(x)==false){
            map.put(x, new ArrayList<>());
        } 

        map.get(x).add(temp);
    }

    public int pop() {
        // write your code here
        //Pop the last node in DLL.
        Node curr = tail.prev;
        curr.next.prev = curr.prev;
        curr.prev.next = curr.next;
        int data = curr.data;

        //Delete Node from TreeMap.
        ArrayList<Node> al = map.get(data);
        al.remove(al.size()-1);

        if(al.size()==0){
            map.remove(data);
        } else {
            map.put(data, al);
        }

        return data;
    }
   
    public int top() {
        // write your code here
        int data = tail.prev.data;
        return data;
    }
   
    public int peekMax() {
        // Retrive the rightmost value from the treeMap.
        return map.lastKey();
    }
  
    public int popMax() {
        //Get the max value
        int max = peekMax();

        ArrayList<Node> al = map.get(max);
        Node curr = al.get(al.size()-1);

        //Now delete this node.
        curr.prev.next = curr.next;
        curr.next.prev = curr.prev;

        //Also delete it from the treemap.
        al.remove(al.size() - 1);
        if(al.size()==0){
            map.remove(max);
        } else {
            map.put(max, al);
        }

        return curr.data;
    }
}
